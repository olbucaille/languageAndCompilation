PARSER_BEGIN(DSLProject)
import java.io.ByteArrayInputStream;
import java.io.IOException;
import java.io.InputStream;
import java.nio.charset.Charset;
import Business.ArrayCustom;
import Business.Env;
import Business.VectorCustom;

public class DSLProject
{
public static  Env env;
   public static void main(String args[]) throws ParseException, IOException
	{
		env = new Env();
		String ToExecute="";
		DSLProject parser=null;

		for(int i=0;i<args.length;++i)
		{

			if(i==0)
				ToExecute=args[i];
			else
				if(i==1)
					env.NameToGenerate=args[i];
				else
					env.store(args[i], true).name="%".concat(String.valueOf(i-1));

		}
		if(ToExecute.equals(""))
		{
			parser = new DSLProject(System.in);
			while(true)
				parser.parseOneLine();
		}
		else
		{

			InputStream is = new ByteArrayInputStream(Charset.forName("UTF-8").encode(ToExecute.toString()).array());

			is.close();
			String[] count = ToExecute.split("\n");

			parser = new DSLProject(is);
			int i=2;
			while(count.length>i)
			{
				parser.parseOneLine();
				i++;}
		}




	}}
PARSER_END(DSLProject)
SKIP :
{
    " "
|   "\r"
|   "\t"
}
TOKEN:
{

    < NUMBER: (<DIGIT>)+ ( "." (<DIGIT>)+ )? >
|   < ARRAY: "["(<BS>|<NUMBER>)*"]">
|   < VECTOR: "["(<BS>|<ARRAY>)*"]">
|	< VARIABLE: ((("%")?(<DIGIT>)*)|(["a"-"z"])*)>
|   < DIGIT: ["0"-"9"] >
|	< BS: (" ")*>
|   < EOL: "\n" >
}
void parseOneLine():
{
    VectorCustom a;
}
{
    a=expr() <EOL>      { env.display(); }
  | <EOL>
  | <EOF>               { System.exit(0); }

}
VectorCustom expr():
{
    VectorCustom a;
    VectorCustom b;
}
{
    a=term()
    (
        "+" b=expr()    { a.add(b); return a; }
    |   "-" b=expr()    { a.sub(b); return a; }
    |   "=" b=expr()     { b.affect(a); return b;}
    )*{return a;}
}
VectorCustom term():
{
    VectorCustom a;
    VectorCustom b;
}
{
    a=element()
    (
        "*" b=term()    { a.display();a.mul(b); return a; }
    |   "/" b=term()    { a.div(b); return a;}
    )*
                        { return a; }
}
VectorCustom element():
{
    Token t;

}
{
   t=<VECTOR>			{ return Env.store(t.toString(),true);}
|  t=<VARIABLE>			{   return Env.store(t.toString(),false); }

}