PARSER_BEGIN(DSLProject)
import Business.ArrayCustom;
import Business.Env;

public class DSLProject
{
public static  Env env;
    public static void main(String args[]) throws ParseException 
    {
    env = new Env();
        DSLProject parser = new DSLProject(System.in);
        while (true)
        {
       
            parser.parseOneLine();
        }
    }
}
PARSER_END(DSLProject)
SKIP :
{
    " "
|   "\r"
|   "\t"
}
TOKEN:
{

    < NUMBER: (<DIGIT>)+ ( "." (<DIGIT>)+ )? >
|   < ARRAY: "["(<BS>|<NUMBER>)*"]">
|	< VARIABLE: (["a"-"z"])*>
|   < DIGIT: ["0"-"9"] >
|	< BS: (" ")*>
|   < EOL: "\n" >
}
void parseOneLine():
{
    ArrayCustom a;
}
{
    a=expr() <EOL>      { env.display(); }
  | <EOL>
  | <EOF>               { System.exit(-1); }
}
ArrayCustom expr():
{
    ArrayCustom a;
    ArrayCustom b;
}
{
    a=element()
    (
        "+" b=expr()    { a=a.add(b); return a; }
    |   "-" b=expr()    { a=a.sub(b); return a; }
    |   "=" b=expr()     { b.affect(a); return b;}
    )*{return a;}
}

ArrayCustom element():
{
    Token t;
    ArrayCustom a;
}
{
    t=<ARRAY>			{  return Env.store(t.toString(),true); }
|  t=<VARIABLE>			{   return Env.store(t.toString(),false); }

}